// Generated by CoffeeScript 1.12.5
var cloneDeep, convertExpandToObject, dateToMoment, errors, fromPairs, includes, isArray, isEmpty, isFunction, isNumber, isString, memoizee, mergeExpandOptions, moment, notImplemented, now, semver, throttle,
  hasProp = {}.hasOwnProperty;

errors = require('resin-errors');

semver = require('resin-semver');

cloneDeep = require('lodash/cloneDeep');

fromPairs = require('lodash/fromPairs');

includes = require('lodash/includes');

isArray = require('lodash/isArray');

isEmpty = require('lodash/isEmpty');

isFunction = require('lodash/isFunction');

isNumber = require('lodash/isNumber');

isString = require('lodash/isString');

throttle = require('lodash/throttle');

memoizee = require('memoizee');

moment = require('moment');

exports.deviceTypes = require('./device-types');

exports.getImgMakerHelper = require('./img-maker');

exports.notImplemented = notImplemented = function() {
  throw new Error('The method is not implemented.');
};

exports.onlyIf = function(condition) {
  return function(fn) {
    if (condition) {
      return fn;
    } else {
      return notImplemented;
    }
  };
};

exports.now = now = throttle(function() {
  return moment();
}, 1000, {
  leading: true
});

exports.dateToMoment = dateToMoment = memoizee(function(date) {
  return moment(date);
}, {
  max: 1000,
  primitive: true
});

exports.timeSince = function(input, suffix) {
  var date, time;
  if (suffix == null) {
    suffix = true;
  }
  date = dateToMoment(input);
  time = now();
  return moment.min(time, date).from(time, !suffix);
};

exports.isId = isNumber;

exports.LOCKED_STATUS_CODE = 423;

exports.findCallback = function(args) {
  var lastArg;
  lastArg = args[args.length - 1];
  if (isFunction(lastArg)) {
    return lastArg;
  }
  return null;
};

exports.notFoundResponse = {
  code: 'ResinRequestError',
  statusCode: 404
};

exports.treatAsMissingApplication = function(nameOrId) {
  return function(err) {
    var replacementErr;
    replacementErr = new errors.ResinApplicationNotFound(nameOrId);
    replacementErr.stack = err.stack;
    throw replacementErr;
  };
};

exports.treatAsMissingDevice = function(uuidOrId) {
  return function(err) {
    var replacementErr;
    replacementErr = new errors.ResinDeviceNotFound(uuidOrId);
    replacementErr.stack = err.stack;
    throw replacementErr;
  };
};

exports.isDevelopmentVersion = function(version) {
  return /(\.|\+|-)dev/.test(version);
};

exports.isProvisioned = function(device) {
  return !isEmpty(device.supervisor_version) && !isEmpty(device.last_connectivity_event);
};

exports.mergePineOptions = function(defaults, extras) {
  var option, result, value;
  if (!extras) {
    return defaults;
  }
  result = cloneDeep(defaults);
  for (option in extras) {
    if (!hasProp.call(extras, option)) continue;
    value = extras[option];
    switch (option) {
      case 'select':
        if (value != null) {
          if (!isArray(value)) {
            value = [value];
          }
          if (!includes(value, 'id')) {
            value.unshift('id');
          }
        }
        result[option] = value;
        break;
      case 'orderby':
      case 'top':
      case 'skip':
        result[option] = value;
        break;
      case 'filter':
        if (defaults.filter) {
          result.filter = {
            $and: [defaults.filter, value]
          };
        } else {
          result.filter = value;
        }
        break;
      case 'expand':
        result.expand = mergeExpandOptions(defaults.expand, value);
        break;
      default:
        throw new Error("Unknown pine option: " + option);
    }
  }
  return result;
};

mergeExpandOptions = function(defaultExpand, extraExpand) {
  var expandKey, expandOptions, extraExpandOptions;
  if (defaultExpand == null) {
    return extraExpand;
  }
  defaultExpand = convertExpandToObject(defaultExpand);
  extraExpand = convertExpandToObject(extraExpand);
  for (expandKey in extraExpand) {
    if (!hasProp.call(extraExpand, expandKey)) continue;
    extraExpandOptions = extraExpand[expandKey];
    expandOptions = defaultExpand[expandKey] || (defaultExpand[expandKey] = {});
    if (extraExpandOptions.$select) {
      expandOptions.$select = extraExpandOptions.$select;
    }
    if (extraExpandOptions.$expand) {
      expandOptions.$expand = mergeExpandOptions(expandOptions.$expand, extraExpandOptions.$expand);
    }
  }
  return defaultExpand;
};

convertExpandToObject = function(expandOption) {
  var expandKey, expandRelationshipOptions, invalidKeys, obj;
  if (expandOption == null) {
    return {};
  } else if (isString(expandOption)) {
    return (
      obj = {},
      obj["" + expandOption] = {},
      obj
    );
  } else if (isArray(expandOption)) {
    return fromPairs(expandOption.map(function(key) {
      return [key, {}];
    }));
  } else {
    for (expandKey in expandOption) {
      if (!hasProp.call(expandOption, expandKey)) continue;
      expandRelationshipOptions = expandOption[expandKey];
      invalidKeys = Object.keys(expandRelationshipOptions).filter(function(key) {
        return key !== '$select' && key !== '$expand';
      });
      if (invalidKeys.length > 0) {
        throw new Error("Unknown pine expand options: " + invalidKeys);
      }
    }
    return cloneDeep(expandOption);
  }
};
