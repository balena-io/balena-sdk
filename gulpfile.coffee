path = require('path')

gulp = require('gulp')
mocha = require('gulp-mocha')
gutil = require('gulp-util')
coffeelint = require('gulp-coffeelint')
coffee = require('gulp-coffee')
insert = require('gulp-insert')
runSequence = require('run-sequence')
browserify = require('browserify')
uglify = require('gulp-uglify')
uglifyEs = require('uglify-es')
uglifyComposer = require('gulp-uglify/composer')
source = require('vinyl-source-buffer')

minify = uglifyComposer(uglifyEs, console)

packageJSON = require('./package.json')

{ loadEnv } = require('./tests/util')

OPTIONS =
	config:
		browserLibraryName: 'balena-sdk'
	files:
		coffee: [ 'lib/**/*.coffee', 'tests/**/*.coffee', 'gulpfile.coffee' ]
		app: 'lib/**/*.coffee'
		tests: [ 'tests/**/*.spec.ts', 'tests/**/*.spec.coffee' ]
		browserEntry: 'balena.js'
		browserOutput: 'balena-browser.js'
		browserMinifiedOutput: 'balena-browser.min.js'
	directories:
		doc: 'doc/'
		build: 'build/'

gulp.task 'test', ->
	loadEnv()
	gulp.src(OPTIONS.files.tests, read: false)
		.pipe(mocha({
			reporter: 'spec',
			require: ['ts-node/register'],
			compilers: 'coffee:coffeescript/register',
			timeout: 5 * 60 * 1000,
			slow: 10 * 1000
		}))

gulp.task 'build', (callback) ->
	runSequence('build-node', 'build-browser', callback)


gulp.task 'build-node', ->
	gulp.src(OPTIONS.files.app)
		.pipe(coffee(header: true, bare: true)).on('error', gutil.log)
		.pipe(gulp.dest(OPTIONS.directories.build))

gulp.task 'build-browser', ['build-node'], ->
	bundle = browserify
		entries: OPTIONS.files.browserEntry,
		basedir: OPTIONS.directories.build
		standalone: OPTIONS.config.browserLibraryName

	# These modules are referenced in the code, but only get used in Node:
	.exclude('fs')
	.exclude('path')
	.exclude('balena-settings-client')
	.exclude('node-localstorage')
	.bundle()

	bundle
		.pipe(source(OPTIONS.files.browserOutput))
		.pipe(insert.prepend('// Generated by browserify\n'))
		.pipe(gulp.dest(OPTIONS.directories.build))

	bundle
		.pipe(source(OPTIONS.files.browserMinifiedOutput))
		.pipe(minify())
		.pipe(gulp.dest(OPTIONS.directories.build))

